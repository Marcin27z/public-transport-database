@using System.ServiceModel.Security
@model TicketRetailSystem.ViewModels.EverythingViewModel
@{
    ViewBag.Title = "Statistics of ticket sale";
}

<style>
</style>
<script src="https://code.jquery.com/jquery-3.3.1.js"></script>
<script src="https://cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/1.10.19/js/dataTables.bootstrap.min.js"></script>
<script>
    $(document).ready(function () {
        $('.data').DataTable({
            "paging": false,
            "order": [[1, "desc"]],
            "filter": false,
            "info": false
        }
        )

        let nice = true;

        $('#tickets').DataTable({
            "paging": nice,
            "order": [[0, "asc"]],
            "filter": false,
            "info": nice,
        }
        )
    });
</script>

<h1>Statistics of ticket sale</h1>

<div class="panel-group">
    @if (Model != null)
    {
        <h2>1. Report info</h2>
        <p>
            <b>Chosen dates:</b>
            @Model.ChosenData.StartTime - @Model.ChosenData.EndTime
            <br />

            <b>Chosen zones:</b>
            @string.Join(", ", @Model.ChosenData.Zone.Select(g => g.ToString()))
            <br />

            <b>Chosen discount types:</b>
            @string.Join(", ", @Model.ChosenData.DiscountType.Select(g => g.ToString()))
            <br />

            <b>Chosen payment types: </b>
            @string.Join(", ", @Model.ChosenData.PaymentType.Select(g => g.ToString()))

        </p>

        <h2>2. Overall statistics of selected transactions</h2>
        <p>
            <b>Total number of tickets:</b> @Model.DetailedInfo.Count <br />
            <b>Total profit:</b> @Model.DetailedInfo.Sum(item => item.TicketIssuedPrice) <br />
            @{
                var topDiscounts = Model.DetailedInfo
                .GroupBy(i => i.TicketType.DiscountType)
                .OrderByDescending(g => g.Count());
                //.Select(g => g.Key);

                var topZones = Model.DetailedInfo
                .GroupBy(i => i.TicketType.Zone)
                .OrderByDescending(g => g.Count());
                //.Select(g => g.Key);

                var topPaymentTypes = Model.DetailedInfo
                .GroupBy(i => i.PaymentType)
                .OrderByDescending(g => g.Count());
                //.Select(g => g.Key);
            }
            <b>Most frequent discount type(s):</b> @string.Join(", ", topDiscounts.Select(g => g.Key)) <br />
            <b>Most frequent zone(s): </b> @string.Join(", ", topZones.Select(g => g.Key)) <br />
            <b>Most frequent payment method(s):</b>  @string.Join(", ", topPaymentTypes.Select(g => g.Key))


        </p>

        <h2>3. Statistics of</h2>

        <h3>3.1 Discount types</h3>
        <small>Click column's heading to sort by that column.</small>
        <table class="data table table-striped">
            <thead>
                <tr>
                    <th scope="col">Discount type</th>
                    <th scope="col">Number of tickets</th>
                    <th scope="col">Profit</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var discount in topDiscounts)
                {
                    <tr>
                        <th scope="row">@discount.Key</th>
                        @{
                            var profit = Model.DetailedInfo.Where(i => i.TicketType.DiscountType == discount.Key).Sum(i => i.TicketIssuedPrice);
                        }
                        <td>@discount.Count()</td>
                        <td>@profit</td>
                    </tr>
                }
            </tbody>
        </table>

        <h3>3.2 Zones</h3>
        <small>Click column's heading to sort by that column.</small>
        <table class="data table table-striped">
            <thead>
                <tr>
                    <th scope="col">Zone</th>
                    <th scope="col">Number of tickets</th>
                    <th scope="col">Profit</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var zone in topZones)
                {
                    <tr>
                        <th scope="row">@zone.Key</th>
                        @{
                            var profit = Model.DetailedInfo.Where(i => i.TicketType.Zone == zone.Key).Sum(i => i.TicketIssuedPrice);
                        }
                        <td>@zone.Count()</td>
                        <td>@profit</td>
                    </tr>
                }
            </tbody>
        </table>

        <h3>3.3 Payment method stats</h3>
        <small>Click column's heading to sort by that column.</small>
        <table class="data table table-striped">
            <thead>
                <tr>
                    <th scope="col">Payment method</th>
                    <th scope="col">Number of tickets</th>
                    <th scope="col">Profit</th>

                </tr>
            </thead>
            <tbody>
                @foreach (var pmet in topPaymentTypes)
                {
                    <tr>
                        <th scope="row">@pmet.Key</th>
                        @{
                            var profit = Model.DetailedInfo.Where(i => i.PaymentType == pmet.Key).Sum(i => i.TicketIssuedPrice);
                        }
                        <td>@pmet.Count()</td>
                        <td>@profit</td>
                    </tr>
                }
            </tbody>
        </table>

        <br />

        <h2>4. List of all tickets in selected transactions</h2>
        <small>Click column's heading to sort by that column.</small> <br/><br/>
        <table id="tickets" class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Ticket ID</th>
                    <th scope="col">User ID</th>
                    <th scope="col">Card ID</th>
                    <th scope="col">Payment type</th>
                    <th scope="col">Discount type</th>
                    <th scope="col">Zone</th>
                    <th scope="col">Price</th>
                    <th scope="col">Transaction ID</th>
                    <th scope="col">Transaction date & time</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var di in Model.DetailedInfo)
                {
                    <tr>
                        <th scope="row">@di.TicketId</th>
                        <td>
                            @if (di.UserId != -1)
                            {
                                @di.UserId
                            }
                            else
                            {
                                @:-
                            }
                        </td>
                        <td>
                            @if (di.CardId != -1)
                            {
                                @di.CardId
                            }
                            else
                            {
                                @:-
                            }
                        </td>
                        <td>@di.PaymentType</td>
                        <td>@di.TicketType.DiscountType</td>
                        <td>@di.TicketType.Zone</td>
                        <td>@di.TicketIssuedPrice</td>
                        <td>@di.TransactionId</td>
                        <td>@di.TransactionDate.ToString("dd.MM.yyyy  HH:mm:ss")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>At least one value must be chosen for zone, discount type and payment type.</p>
    }

</div>